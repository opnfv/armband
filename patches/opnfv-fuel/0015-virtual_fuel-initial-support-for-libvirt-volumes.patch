From: Josep Puigdemont <josep.puigdemont@enea.com>
Date: Wed, 4 May 2016 14:27:23 +0200
Subject: [PATCH] virtual_fuel: initial support for libvirt volumes

This patch introduces the ability to create volumes on the libvirt host
where the Fuel VM is being deployed. For now a default pool is used,
but the idea is to allow this to be configured.

Since all virsh commands honor LIBVIRT_DEFAULT_URI, we use this
environment variable to detect wheter we should create a volume or not.
The rationale being that this environment variable will only be set if
the user wants to do the VM deployment on a remote libvirt host.

All this could also be done using scp and a user directory on the host
machine, but using pools allows us to take advantage of libvirt's
policies and file permissions.

This patch will use a pool called "jenkins" in the libvirt server, and
it will fail if it is not present. This is a requirement that should be
amended in the future, and properly documented.

Signed-off-by: Josep Puigdemont <josep.puigdemont@enea.com>
---
 deploy/deploy.py                    |  5 ++++
 deploy/environments/virtual_fuel.py | 59 ++++++++++++++++++++++++++++++++-----
 2 files changed, 56 insertions(+), 8 deletions(-)

diff --git a/deploy/deploy.py b/deploy/deploy.py
index f86f2be..265e888 100755
--- a/deploy/deploy.py
+++ b/deploy/deploy.py
@@ -243,6 +243,11 @@ class AutoDeploy(object):
 
 
 def check_bridge(pxe_bridge, dha_path):
+    # Assume that bridges on remote nodes exists, we could ssh but
+    # the remote user might not have a login shell.
+    if os.environ.get('LIBVIRT_DEFAULT_URI'):
+        return
+
     with io.open(dha_path) as yaml_file:
         dha_struct = yaml.load(yaml_file)
     if dha_struct['adapter'] != 'libvirt':
diff --git a/deploy/environments/virtual_fuel.py b/deploy/environments/virtual_fuel.py
index 82c4e47..d2907fa 100644
--- a/deploy/environments/virtual_fuel.py
+++ b/deploy/environments/virtual_fuel.py
@@ -11,14 +11,34 @@
 from lxml import etree
 from execution_environment import ExecutionEnvironment
 import tempfile
+import os
+import re
 
 from common import (
     exec_cmd,
     check_file_exists,
     check_if_root,
     delete,
+    log,
 )
 
+vol_xml_template = '''<volume type='file'>
+  <name>%name%</name>
+  <capacity unit='%unit%'>%size%</capacity>
+  <target>
+    <format type='qcow2'/>
+  </target>
+</volume>
+'''
+
+def get_size_and_unit(s):
+    p = re.compile('^(\d+)\s*(\D+)')
+    m = p.match(s)
+    if m == None:
+        return None, None
+    size = m.groups()[0]
+    unit = m.groups()[1]
+    return size, unit
 
 class VirtualFuel(ExecutionEnvironment):
 
@@ -51,19 +71,42 @@ class VirtualFuel(ExecutionEnvironment):
         with open(temp_vm_file, 'w') as f:
             vm_xml.write(f, pretty_print=True, xml_declaration=True)
 
+    def create_volume(self, pool, name, su, img_type='qcow2'):
+        log('Creating image using Libvirt volumes in pool %s, name: %s' %
+            (pool, name))
+        size, unit = get_size_and_unit(su)
+        if size == None:
+            err('Could not determine size and unit of %s' % s)
+
+        vol_xml = vol_xml_template.replace('%name%',name)
+        vol_xml = vol_xml.replace('%size%', str(size)).replace('%unit%', 'G')
+        vol_xml = vol_xml.replace('%type%', img_type)
+        fname = os.path.join(self.temp_dir, '%s_vol.xml' % name)
+        with file(fname, 'w') as f:
+            f.write(vol_xml)
+
+        exec_cmd('virsh vol-create --pool %s %s' % (pool, fname))
+        vol_path = exec_cmd('virsh vol-path --pool %s %s' % (pool, name))
+
+        delete(fname)
+
+        return vol_path
+
     def create_image(self, disk_path, disk_size):
-        exec_cmd('qemu-img create -f qcow2 %s %s' % (disk_path, disk_size))
+        if os.environ.get('LIBVIRT_DEFAULT_URI') == None:
+            exec_cmd('qemu-img create -f qcow2 %s %s' % (disk_path, disk_size))
+            return disk_path
+        else:
+            pool = 'jenkins' # FIXME
+            name = os.path.basename(disk_path)
+            return self.create_volume(pool, name, disk_size)
 
     def create_vm(self):
-        vm_template = '%s/%s' % (self.root_dir,
-                                 self.dha.get_node_property(
-                                     self.fuel_node_id, 'libvirtTemplate'))
-        check_file_exists(vm_template)
-
-        disk_path = '%s/%s.raw' % (self.storage_dir, self.vm_name)
+        stamp = time.strftime("%Y%m%d%H%M%S")
+        disk_path = '%s/%s-%s.raw' % (self.storage_dir, self.vm_name, stamp)
         disk_sizes = self.dha.get_disks()
         disk_size = disk_sizes['fuel']
-        self.create_image(disk_path, disk_size)
+        disk_path = self.create_image(disk_path, disk_size)
 
         temp_vm_file = '%s/%s' % (self.temp_dir, self.vm_name)
         exec_cmd('cp %s %s' % (vm_template, temp_vm_file))
