From: Alexandru Avadanii <Alexandru.Avadanii@enea.com>
Date: Wed, 6 Jul 2016 17:03:49 +0200
Subject: [PATCH] f_repobuild: Use packetary to build partial mirror

FIXME: DO NOT MERGE until [2, 3] are merged upstream & included here!

Packetary [1] will replace fuel-mirror in upstream Fuel.
fuel-mirror is using packetary under the hood already, so the
transition should not be too hard.

Adapt OPNFV Ubuntu partial mirror build:
- obsolete opnfv-config.yaml (packetary uses CLI args for this);
- split old ubuntu.yaml into:
  * mos_<arch>_mirror.yaml - MOS mirror cfg, only for deps analysis;
  * ubuntu_<arch>_mirror.yaml - Ubuntu mirror cfg, for pkgs download;
  * ubuntu_<arch>_packages.yaml - Ubuntu packages to download;

While the consumers of our mirror still use `debootstrap`, which only
supports the "main" repo component, make sure the "main" package set
is complete, in the scope of:
  * ubuntu_<arch>_mirror_main.yaml - Ubuntu [main only] mirror;
  * ubuntu_<arch>_packages_main.yaml - Ubuntu packages for [main];

New workflow (executed for EACH architecture):
1. Parse "fuel-mirror/contrib/fuel_mirror/data/ubuntu.yaml"
   and write correponding sections to new yaml files described above;

   NOTE: Since fuel-mirror is going to be made obsolete, there are a
   number of new ways we can gather the data currently passed via
   fuel-mirror's "ubuntu.yaml" (e.g. use "mos-repos" from Fuel ISO
   to determine MOS dependencies).

2. Add OPNFV extra package dependencies (NEW)
   Currently, this is empty / not used, but might be used to add
   extra packages to the local mirror, like additional kernels,
   bootloaders etc.

   NOTE: Dependencies up to and including this group should also
   be satisfiable from Ubuntu "main" repo component only.

3. Append plugin dependencies to the package list;

4. Run `packetary unresolved` for MOS repos, gathering MOS deps that
   should be fetched from Ubuntu. The new packages will be appended
   to the predefined list from old "ubuntu.yaml";

5. Run `packetary clone` to download all required pkgs for the
   partial Ubuntu mirror.

6. Run `packetary clone` only on Ubuntu[main] repo components to
   download any (still) missing dependencies for `debootstrap`,
   which only looks at this component, and not the whole mirror.

v1 -> v2:
- multiarch support (activated via UBUNTU_ARCH envvar);
- fixed debootstrap missing deps in "main" component of Ubuntu mirror;
- factored out some hardcodes into variables/functions;
- add .gitignore file;
- move generated config files to "opnfv_config" subdir;
- added arm64 Ubuntu repo URL (ports.ubuntu.com is separated from the
  main Ubuntu mirror, archive.ubuntu.com, which only holds x86 pkgs);

[1] https://wiki.openstack.org/wiki/Packetary
[2] https://review.openstack.org/#/c/392936/
[3] https://review.openstack.org/#/c/392937/

JIRA: FUEL-218

Change-Id: If2ee86f348b7683c83bfaf686baba4f1b8f555f0
Signed-off-by: Alexandru Avadanii <Alexandru.Avadanii@enea.com>
---
 build/config.mk                                    |   5 +
 build/f_isoroot/f_repobuild/.gitignore             |   4 +
 build/f_isoroot/f_repobuild/Makefile               |  34 ++--
 build/f_isoroot/f_repobuild/config.mk              |  21 +++
 build/f_isoroot/f_repobuild/opnfv_mirror_conf.py   |  57 -------
 build/f_isoroot/f_repobuild/opnfv_mirror_ubuntu.py | 186 +++++++++++++++++++++
 build/f_isoroot/f_repobuild/opnfv_packages.yaml    |  14 ++
 7 files changed, 245 insertions(+), 76 deletions(-)
 create mode 100644 build/f_isoroot/f_repobuild/.gitignore
 create mode 100644 build/f_isoroot/f_repobuild/config.mk
 delete mode 100755 build/f_isoroot/f_repobuild/opnfv_mirror_conf.py
 create mode 100755 build/f_isoroot/f_repobuild/opnfv_mirror_ubuntu.py
 create mode 100644 build/f_isoroot/f_repobuild/opnfv_packages.yaml

diff --git a/build/config.mk b/build/config.mk
index ab27858..a62b7e9 100644
--- a/build/config.mk
+++ b/build/config.mk
@@ -17,6 +17,11 @@ FUEL_MAIN_TAG = 9.0.1
 MOS_VERSION   = 9.0
 OPENSTACK_VERSION = mitaka-9.0
 
+# List of space-separated Ubuntu architectures supported with current build
+# Format: same as `dpkg-architecture -qDEB_HOST_ARCH1`
+# NOTE: Currently only amd64 is supported by Fuel@OPNFV. Armband adds arm64.
+export UBUNTU_ARCH ?= amd64
+
 # FIXME(alav): Disable remote tracking for now, stick to submodule commits
 FUEL_TRACK_REMOTES =
 
diff --git a/build/f_isoroot/f_repobuild/.gitignore b/build/f_isoroot/f_repobuild/.gitignore
new file mode 100644
index 0000000..cfedefb
--- /dev/null
+++ b/build/f_isoroot/f_repobuild/.gitignore
@@ -0,0 +1,4 @@
+packetary
+fuel-mirror
+nailgun
+opnfv_config
diff --git a/build/f_isoroot/f_repobuild/Makefile b/build/f_isoroot/f_repobuild/Makefile
index 8beb882..a47441c 100644
--- a/build/f_isoroot/f_repobuild/Makefile
+++ b/build/f_isoroot/f_repobuild/Makefile
@@ -1,7 +1,8 @@
 ##############################################################################
-# Copyright (c) 2015 Ericsson AB and others.
+# Copyright (c) 2015,2016 Ericsson AB, Enea AB and others.
 # stefan.k.berg@ericsson.com
 # jonas.bjurel@ericsson.com
+# Alexandru.Avadanii@enea.com
 # All rights reserved. This program and the accompanying materials
 # are made available under the terms of the Apache License, Version 2.0
 # which accompanies this distribution, and is available at
@@ -10,41 +11,36 @@
 
 SHELL := /bin/bash
 TOP := $(shell pwd)
-TMP_ROOT_DIR := $(shell echo "$(MIRROR_UBUNTU_ROOT)" | cut -d "/" -f2)
 
 include ../../config.mk
+include config.mk
 
 export MOS_VERSION
-export OPENSTACK_VERSION
+export MIRROR_UBUNTU_OPNFV_PATH:=$(TOP)/nailgun/mirrors/ubuntu
 
 .PHONY: all
 all: nailgun
 
 nailgun:
-	sudo apt-get install -y git libxml2-dev libxslt-dev python-dev  python-pip libz-dev libyaml-dev createrepo python-yaml
-	rm -Rf nailgun
-	sudo mkdir -p /var/www/nailgun
+	sudo apt-get install -y createrepo git libxml2-dev libxslt1-dev \
+		python-dev zlib1g-dev
+	rm -Rf nailgun packetary opnfv_config && mkdir opnfv_config
 	ln -sf ${F_SUBMOD_DIR}/fuel-mirror fuel-mirror
-	sudo pip install -U -r ./fuel-mirror/requirements.txt
-	sudo pip install ./fuel-mirror
-	sudo pip install ./fuel-mirror/contrib/fuel_mirror
-	./opnfv_mirror_conf.py
-	sudo fuel-mirror --debug --config ./opnfv-config.yaml create --group ubuntu --pattern=ubuntu
-	sudo chmod -R 755 /var/www/nailgun
-	cp -Rp /var/www/nailgun .
-	# In the end we want to have ubuntu repository in mirrors/ubuntu directory
-	-if [ "$(MIRROR_UBUNTU_ROOT)" != "/ubuntu/" ]; then \
-	  mkdir -p nailgun/mirrors/ubuntu;\
-	  mv nailgun/mirrors$(MIRROR_UBUNTU_ROOT)* nailgun/mirrors/ubuntu;\
-	  [ "$(MIRROR_UBUNTU_ROOT)" != "/" ] && rm -rf nailgun/mirrors/$(TMP_ROOT_DIR);\
+	git clone --quiet $(PACKETARY_REPO)
+	if [ -n $(PACKETARY_COMMIT) ]; then \
+		git -C packetary checkout $(PACKETARY_COMMIT); \
 	fi
+	sudo pip install -U -r ./packetary/requirements.txt
+	sudo pip install ./packetary
+	# Handle config and mirror build in one place
+	./opnfv_mirror_ubuntu.py
 	# Store artifact in cache straight away if caching is enabled
 	# (no .cacheid will be present unless this is a cached build)
 	test -f .cacheid && $(MAKE) -f Makefile put-cache || exit 0
 
 .PHONY: clean
 clean:
-	@rm -rf ../release/opnfv/nailgun nailgun fuel-mirror opnfv-config.yaml ubuntu.yaml
+	@rm -rf ../release/opnfv/nailgun nailgun packetary fuel-mirror opnfv_config
 
 .PHONY: release
 release:nailgun
diff --git a/build/f_isoroot/f_repobuild/config.mk b/build/f_isoroot/f_repobuild/config.mk
new file mode 100644
index 0000000..76f4a64
--- /dev/null
+++ b/build/f_isoroot/f_repobuild/config.mk
@@ -0,0 +1,21 @@
+##############################################################################
+# Copyright (c) 2016 Ericsson AB, Enea AB and others.
+# stefan.k.berg@ericsson.com
+# jonas.bjurel@ericsson.com
+# Alexandru.Avadanii@enea.com
+# All rights reserved. This program and the accompanying materials
+# are made available under the terms of the Apache License, Version 2.0
+# which accompanies this distribution, and is available at
+# http://www.apache.org/licenses/LICENSE-2.0
+##############################################################################
+
+# Use a recent master commit, since tags/branches are not yet mature
+# FIXME(armband): Update upstream commit ref once [1, 2] are merged
+# [1] https://review.openstack.org/#/c/392937/
+# [2] https://review.openstack.org/#/c/392936/
+export PACKETARY_REPO?=https://github.com/openstack/packetary
+export PACKETARY_COMMIT?=c46465c3255a9f5e59a05b8701e06054df39f32f
+
+# arm64 Ubuntu mirror is separated from archive.ubuntu.com
+export MIRROR_UBUNTU_URL_arm64=http://ports.ubuntu.com/ubuntu-ports/
+export MIRROR_UBUNTU_ROOT_arm64=ubuntu-ports
diff --git a/build/f_isoroot/f_repobuild/opnfv_mirror_conf.py b/build/f_isoroot/f_repobuild/opnfv_mirror_conf.py
deleted file mode 100755
index 1c7eb59..0000000
--- a/build/f_isoroot/f_repobuild/opnfv_mirror_conf.py
+++ /dev/null
@@ -1,57 +0,0 @@
-#!/usr/bin/env python
-##############################################################################
-# Copyright (c) 2015 Ericsson AB and others.
-# mskalski@mirantis.com
-# All rights reserved. This program and the accompanying materials
-# are made available under the terms of the Apache License, Version 2.0
-# which accompanies this distribution, and is available at
-# http://www.apache.org/licenses/LICENSE-2.0
-##############################################################################
-import os
-import yaml
-
-current_snapshot =  os.environ["LATEST_TARGET_UBUNTU"]
-mos_version = os.environ['MOS_VERSION']
-openstack_version = os.environ['OPENSTACK_VERSION']
-mos_ubuntu = os.environ['MIRROR_MOS_UBUNTU']
-mos_ubuntu_root = os.environ['MIRROR_MOS_UBUNTU_ROOT']
-mirror_ubuntu = os.environ['MIRROR_UBUNTU_URL']
-if os.environ.get('BUILD_FUEL_PLUGINS'):
-  plugins = os.environ['BUILD_FUEL_PLUGINS']
-else:
-  plugins = os.environ['PLUGINS']
-
-
-configuration_file = open('fuel-mirror/contrib/fuel_mirror/etc/config.yaml').read()
-conf = yaml.load(configuration_file)
-conf['pattern_dir'] = '.'
-conf['openstack_version'] = openstack_version
-conf['mos_version'] = mos_version
-
-with open('opnfv-config.yaml', 'w') as outfile:
-  outfile.write( yaml.dump(conf, default_flow_style=False) )
-
-pattern_file = open('fuel-mirror/contrib/fuel_mirror/data/ubuntu.yaml').read()
-pattern = yaml.load(pattern_file)
-pattern['mos_baseurl'] = "http://{}{}".format(mos_ubuntu, mos_ubuntu_root)
-pattern['ubuntu_baseurl'] = mirror_ubuntu
-for group in pattern['groups']['mos']:
-  group['uri'] = pattern['mos_baseurl']
-for group in pattern['groups']['ubuntu']:
-  group['uri'] = pattern['ubuntu_baseurl']
-
-for plugin in plugins.split():
-  path = "../{}/packages.yaml".format(plugin)
-  if os.path.isfile(path):
-    f = open(path).read()
-    plugin_yaml = yaml.load(f)
-    plugin_set = set(plugin_yaml['packages'])
-    main_set = set(pattern['packages'])
-    new_packages = plugin_set - main_set
-    print "Plugin {} require new packages: {}".format(plugin, ', '.join(new_packages))
-    pattern['packages'] = pattern['packages'] + list(new_packages)
-
-pattern['requirements']['ubuntu'] = pattern['packages']
-
-with open('ubuntu.yaml', 'w') as outfile:
-  outfile.write( yaml.safe_dump(pattern, default_flow_style=False) )
diff --git a/build/f_isoroot/f_repobuild/opnfv_mirror_ubuntu.py b/build/f_isoroot/f_repobuild/opnfv_mirror_ubuntu.py
new file mode 100755
index 0000000..4c2c41a
--- /dev/null
+++ b/build/f_isoroot/f_repobuild/opnfv_mirror_ubuntu.py
@@ -0,0 +1,186 @@
+#!/usr/bin/env python
+##############################################################################
+# Copyright (c) 2015,2016 Ericsson AB, Mirantis Inc., Enea AB and others.
+# mskalski@mirantis.com
+# Alexandru.Avadanii@enea.com
+# All rights reserved. This program and the accompanying materials
+# are made available under the terms of the Apache License, Version 2.0
+# which accompanies this distribution, and is available at
+# http://www.apache.org/licenses/LICENSE-2.0
+##############################################################################
+
+##############################################################################
+# Build multiarch partial local Ubuntu mirror
+##############################################################################
+# Design quirks:
+# 1. Fuel-agent uses `debootstrap` to build bootstrap and target chroots from
+#    the local mirror; which only uses the "main" component from the first
+#    repository, i.e. does not include "updates"/"security".
+#    In order to fullfill all debootstrap dependencies in "main" repo, we will
+#    do an extra packetary run using a reduced scope:
+#    - only "main" component of the first mirror;
+#    - reduced package dependency list (without MOS/OPNFV plugin deps).
+##############################################################################
+# Mirror build steps:
+# 1. Parse old <fuel-mirror> package list ("ubuntu.yaml");
+# 2. Parse new "opnfv_packages.yaml" list of additional packages;
+# 3. Inherit enviroment variable(s) for mirror URLs, paths etc.
+#    - Allow arch-specific overrides for each env var;
+# 4. For each architecture in UBUNTU_ARCH:
+# 4.1. Mirror config is defined based on common config + OPNFV overrides;
+#      - Convert old configuration format to packetary style where needed;
+# 4.2. Package lists are defined based on common config + OPNFV deps;
+#      - Keep track of "main" packages separately, required by debootstrap;
+# 4.3. Clone/update all mirror components;
+# 4.4. Clone/update "main" mirror component (fix missing debootstrap deps);
+##############################################################################
+
+import copy
+import os
+import sys
+import yaml
+from contextlib import contextmanager
+from cStringIO import StringIO
+from packetary.cli.app import main
+
+@contextmanager
+def captureStdOut(output):
+    stdout = sys.stdout
+    sys.stdout = output
+    yield
+    sys.stdout = stdout
+
+# Determine missing package dependecies for a mirror defition
+def get_unres_pkgs(arch, cfg_mirror):
+  unresolved = dict()
+  unresolved['packages'] = list()
+  packetary_output = StringIO()
+  with captureStdOut(packetary_output):
+    main('unresolved -a {0} -r {1} -c name version --sep ;'
+      .format(_ARCHITECTURES[arch], cfg_mirror).split(' '))
+  for dep_pkg in packetary_output.getvalue().splitlines():
+    if dep_pkg.startswith('#'):
+      continue
+    dep = dep_pkg.split(';')
+    unresolved['packages'] += [ {'name': dep[0], 'version': dep[1]} ]
+  return unresolved
+
+# Clone partial local mirror (one arch per call)
+def do_partial_mirror(arch, cfg_mirror, cfg_packages):
+  # Packetary does not use a global config file, so pass old settings
+  # here (note: '-d .' is ignored, as each mirror defines its own path).
+  main('clone -a {0} -r {1} -R {2} -d .'
+    ' --ignore-errors-num 2 --retries-num 3 --threads-num 10'
+    .format(_ARCHITECTURES[arch], cfg_mirror, cfg_packages).split(' '))
+
+# Write configuration (yaml) file (package list / mirror defition)
+def write_cfg_file(cfg_mirror, data):
+  with open(cfg_mirror, 'w') as outfile:
+    outfile.write( yaml.safe_dump(data, default_flow_style=False) )
+
+# Allow arch-specific overrides of env vars
+def get_env(env_var, arch=None):
+  if arch:
+    env_var_arch = '{0}_{1}'.format(env_var, arch)
+    if os.environ.get(env_var_arch):
+      return os.environ[env_var_arch]
+  if os.environ.get(env_var):
+    return os.environ[env_var]
+  return None
+
+# Architecture name mapping (dpkg:packetary) for packetary CLI invocation
+_ARCHITECTURES = {
+    "i386": "i386",
+    "amd64": "x86_64",
+    "arm64": "aarch64",
+}
+
+# Arch-indepedent configuration (old fuel-mirror + OPNFV extra packages)
+cfg_dir = 'opnfv_config'
+cfg_p_opnfv = 'opnfv_packages.yaml'
+ubuntu_arch = get_env('UBUNTU_ARCH')
+pattern_file = open('fuel-mirror/contrib/fuel_mirror/data/ubuntu.yaml').read()
+pattern = yaml.load(pattern_file)
+opnfv_pkgs_yaml = open(cfg_p_opnfv).read()
+opnfv_pkgs = yaml.load(opnfv_pkgs_yaml)
+
+# Create local partial mirror using packetary, one arch at a time
+for arch in ubuntu_arch.split(' '):
+  # Mirror / Package env vars, arch-overrideable
+  mos_version = get_env('MOS_VERSION', arch)
+  mos_ubuntu = get_env('MIRROR_MOS_UBUNTU', arch)
+  mos_ubuntu_root = get_env('MIRROR_MOS_UBUNTU_ROOT', arch)
+  mirror_ubuntu = get_env('MIRROR_UBUNTU_URL', arch)
+  mirror_ubuntu_path = get_env('MIRROR_UBUNTU_OPNFV_PATH', arch)
+  plugins = get_env('BUILD_FUEL_PLUGINS', arch)
+  if plugins is None:
+    plugins = get_env('PLUGINS', arch)
+
+  # Mirror / Package list configuration files (arch-specific)
+  cfg_m_mos = '{0}/mos_{1}_mirror.yaml'.format(cfg_dir, arch)
+  cfg_m_ubuntu = '{0}/ubuntu_{1}_mirror.yaml'.format(cfg_dir, arch)
+  cfg_m_ubuntu_main = '{0}/ubuntu_{1}_mirror_main.yaml'.format(cfg_dir, arch)
+  cfg_p_ubuntu = '{0}/ubuntu_{1}_packages.yaml'.format(cfg_dir, arch)
+  cfg_p_ubuntu_main = '{0}/ubuntu_{1}_packages_main.yaml'.format(cfg_dir, arch)
+
+  # Mirror config fork before customizing (arch-specific)
+  arch_group_mos = 'mos_{0}'.format(arch)
+  arch_group_ubuntu = 'ubuntu_{0}'.format(arch)
+  arch_packages = 'packages_{0}'.format(arch)
+  pattern['groups'][arch_group_mos] = copy.deepcopy(pattern['groups']['mos'])
+  pattern['groups'][arch_group_ubuntu] = copy.deepcopy(pattern['groups']['ubuntu'])
+  pattern[arch_packages] = pattern['packages']
+
+  # Mirror config update & conversion to packetary input
+  group_main_ubuntu = dict()
+  for group in pattern['groups'][arch_group_mos]:
+    group['uri'] = "http://{}{}".format(mos_ubuntu, mos_ubuntu_root)
+    group['suite'] = group['suite'].replace('$mos_version', mos_version)
+    group['section'] = group['section'].split()
+  for group in pattern['groups'][arch_group_ubuntu]:
+    group['uri'] = mirror_ubuntu
+    group['path'] = mirror_ubuntu_path
+    group['section'] = group['section'].split()
+    if not group_main_ubuntu and 'main' in group:
+      group_main_ubuntu = [ copy.deepcopy(group) ]
+  for group in group_main_ubuntu:
+      group['section'] = [ 'main' ]
+
+  # Mirror config dump: MOS (for dep resolution), Ubuntu, Ubuntu[main]
+  write_cfg_file(cfg_m_mos, pattern['groups'][arch_group_mos])
+  write_cfg_file(cfg_m_ubuntu, pattern['groups'][arch_group_ubuntu])
+  write_cfg_file(cfg_m_ubuntu_main, group_main_ubuntu)
+
+  # Package list conversion from `old fuel-mirror` to `packetary` style + OPNFV
+  unresolved_pkgs = dict()
+  unresolved_pkgs['packages'] = list()
+  unresolved_pkgs['mandatory'] = 'exact'
+  if opnfv_pkgs['packages'] is not None:
+    unresolved_pkgs['packages'] = opnfv_pkgs['packages']
+  for pkg in pattern['packages']:
+    unresolved_pkgs['packages'] += [ {'name': pkg} ]
+
+  # Package list (reduced, i.e. no MOS/OPNFV plugin deps)
+  write_cfg_file(cfg_p_ubuntu_main, unresolved_pkgs)
+
+  # OPNFV plugins dependency resolution
+  for plugin in plugins.split():
+    path = "../{}/packages.yaml".format(plugin)
+    if os.path.isfile(path):
+      f = open(path).read()
+      plugin_yaml = yaml.load(f)
+      plugin_set = set(plugin_yaml['packages'])
+      main_set = set(pattern['packages'])
+      new_packages = plugin_set - main_set
+      print('Plugin {0} require new packages: {1}'
+            .format(plugin, ', '.join(new_packages)))
+      for pkg in new_packages:
+        unresolved_pkgs['packages'] += [ {'name': pkg} ]
+
+  # Package list (full, including MOS/OPNFV plugin deps)
+  unresolved_pkgs['packages'] += get_unres_pkgs(arch, cfg_m_mos)['packages']
+  write_cfg_file(cfg_p_ubuntu, unresolved_pkgs)
+
+  # Ubuntu[main] must be evaluated after Ubuntu
+  do_partial_mirror(arch, cfg_m_ubuntu, cfg_p_ubuntu)
+  do_partial_mirror(arch, cfg_m_ubuntu_main, cfg_p_ubuntu_main)
diff --git a/build/f_isoroot/f_repobuild/opnfv_packages.yaml b/build/f_isoroot/f_repobuild/opnfv_packages.yaml
new file mode 100644
index 0000000..3f5c59f
--- /dev/null
+++ b/build/f_isoroot/f_repobuild/opnfv_packages.yaml
@@ -0,0 +1,14 @@
+##############################################################################
+# Copyright (c) 2016 Enea AB and others.
+# Alexandru.Avadanii@enea.com
+# All rights reserved. This program and the accompanying materials
+# are made available under the terms of the Apache License, Version 2.0
+# which accompanies this distribution, and is available at
+# http://www.apache.org/licenses/LICENSE-2.0
+##############################################################################
+
+# This file lists packages that should be present in the local Ubuntu mirror,
+# but are not direct dependencies of any other packages from  MOS or Ubuntu.
+# e.g.: additional kernels, bootloaders etc.
+
+packages:
